3.6启发式函数：
启发式函数能够大大影响搜索性能，这里要比较仔细得查看
对于3*3 滑块问题，总共有181400个可达状态。为了搜索这个空间，要借助一个可容许得启发式函数。
启发式函数可以时h1错位滑块得数量。
或者h2滑块到其目标位置距离得总和。9manhattan distance

衡量启发式函数得质量通过有效分支因子。
科尔夫和里德认为，对于一个使用给定启发式函数h得A剪枝。刻画其效果得方式是有效深度。
对于随机8数码问题，经过测试发现：
在任何一种搜索中，h2都优于h1（计算有效分支因子或者有效深度。）

3.6.2从松弛问题出发生成启发式函数
在8数码问题中，h1和h2都能够当启发式函数，那么问题是计算机能否自发设计启发式函数嘛？
减少了对问题得限制条件成为松弛问题。
松弛问题是对原始空间状态得一个超图。那么松弛问题得一个最优解得代价可以作为一个原问题得可容许的启发式函数

一般松弛问题会设计的容易一些，便于找到松弛问题的解。然后继续运算。

如果可容许得启发式函数集合h1，。。。h们可以求解同一个问题
可以通过
h(n)=max{h1(n),...,hn(n)}得到最优的启发式函数。

3.6.3从子问题出发生成启发式函数：模式数据库。
可容许的启发式函数由给定问题的子问题得解代价推导得到。
模式数据库 得思想是为每个可能得子问题存储准确的解代价。
通过在数据库中查找相应的子问题，为搜索过程中遇到的每个状态算一个可容许的启发式函数。
数据可本身是从目标状态反向搜索并记录所遇到的每个新模式得代价来创建的。
我们可以创建1-2-3-4 5-6-7-8两个不相交模式数据库。
有这样的数据库，可以在几毫秒时间内搜索完毕。

3.6.4使用地标生成启发式函数。
对于很多地标数千万顶点得地图，找到最优路径，依赖于预计算。
预计算很耗时，但是完成可以摊销数十亿用户搜索请求。
可以通过预计算存储每对顶点间得最优路径代价来生成完美启发式函数。
这个方法复杂度对于1000万顶点太大。
更好方法是从中选一些地标点。然后存储每个地表和其他顶点。C（v，L）就是v到L得最优路径得准确代价
然后用这些中转站计算前后得最优
在A搜索中，那么一旦到达一个位于最优路径的节点，那么将有最优路径。

还有一些算法，在途中添加捷径。人工定义得对应于一条最优多行动路径得边。

如果经过路径当然是最优，如果不经过路径，那么需要定义差分启发式：
hdh(n)=max!c(n,l)-c(goal,l)|
可以把它理解为在比目标还要远的某个位置设置一个地标点。
选取地标点办法;
1:随机，但是不太好，不能控制彼此比较分散。
2：贪心算法，是随机选一个，然后选最远的点，如此反复。
3：对于差分启发式函数，地表分布在图的边上最好。可以找到图的质心，然后分出k个怯形

3.6.5 学习更好的搜索。
元级状态空间。此空间中每个状态将捕捉在普通状态空间进行搜索得程序得内部状态。
A*搜索算法得内部状态由搜索树组成。

3.6.6 从经验中学习启发式函数。
